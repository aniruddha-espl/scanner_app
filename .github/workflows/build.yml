name: Build Windows Executable

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9 (64-bit)
      uses: actions/setup-python@v4
      with:
        python-version: '3.9.13'  # Explicit version matching the hosted toolcache
        architecture: 'x64'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyqt5==5.15.7 pyinstaller==5.13.0 pillow==9.5.0
        pip install pyqtwebengine==5.15.6  # Additional Qt components
        
    - name: Verify installation
      run: |
        python -c "import os, PyQt5; print(f'PyQt5 location: {os.path.dirname(PyQt5.__file__)}')"
        python -c "from PyQt5.QtCore import QLibraryInfo; print('Qt5 Plugins:', QLibraryInfo.location(QLibraryInfo.PluginsPath))"
        
    - name: Build with PyInstaller
      run: |
        # Get PyQt5 path (works with both Qt5 and Qt6)
        $PYQT_PATH = python -c "import os, PyQt5; print(os.path.dirname(PyQt5.__file__))"
        $QT_PLUGINS = "$PYQT_PATH\Qt5\plugins"
        
        # Fallback for different Qt installations
        if (-not (Test-Path "$QT_PLUGINS\platforms")) {
            $QT_PLUGINS = "$PYQT_PATH\Qt\plugins"
        }
        
        echo "Using Qt plugins from: $QT_PLUGINS"
        
        # Build command with all necessary components
        pyinstaller --noconfirm --clean --log-level DEBUG `
          --onefile --windowed `
          --add-data "$QT_PLUGINS/platforms/*;platforms/" `
          --add-data "$QT_PLUGINS/imageformats/*;imageformats/" `
          --hidden-import PyQt5.QtCore `
          --hidden-import PyQt5.QtGui `
          --hidden-import PyQt5.QtWidgets `
          --hidden-import PyQt5.QtWebEngineWidgets `
          scanner_app.py
        
        # Verify build
        if (Test-Path -Path "dist\scanner_app.exe") {
            echo "Build successful!"
            # Show executable information
            dir dist\scanner_app.exe
        } else {
            echo "::error::Build failed"
            if (Test-Path -Path "build\scanner_app\warn-scanner_app.txt") {
                Get-Content "build\scanner_app\warn-scanner_app.txt"
            }
            exit 1
        }
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ScannerApp
        path: dist/scanner_app.exe
